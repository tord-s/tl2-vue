{
  "version": 3,
  "sources": ["../@sanity/image-url/src/parseAssetId.ts", "../@sanity/image-url/src/parseSource.ts", "../@sanity/image-url/src/urlForImage.ts", "../@sanity/image-url/src/builder.ts", "dep:@sanity_image-url"],
  "sourcesContent": ["const example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg'\n\nexport default function parseAssetId(ref: string) {\n  const [, id, dimensionString, format] = ref.split('-')\n\n  if (!id || !dimensionString || !format) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  const [imgWidthStr, imgHeightStr] = dimensionString.split('x')\n\n  const width = +imgWidthStr\n  const height = +imgHeightStr\n\n  const isValidAssetId = isFinite(width) && isFinite(height)\n  if (!isValidAssetId) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  return {id, width, height, format}\n}\n", "import {\n  SanityAsset,\n  SanityImageObject,\n  SanityImageSource,\n  SanityImageWithAssetStub,\n  SanityReference,\n} from './types'\n\nconst isRef = (src: SanityImageSource): src is SanityReference => {\n  const source = src as SanityReference\n  return source ? typeof source._ref === 'string' : false\n}\n\nconst isAsset = (src: SanityImageSource): src is SanityAsset => {\n  const source = src as SanityAsset\n  return source ? typeof source._id === 'string' : false\n}\n\nconst isAssetStub = (src: SanityImageSource): src is SanityImageWithAssetStub => {\n  const source = src as SanityImageWithAssetStub\n  return source && source.asset ? typeof source.asset.url === 'string' : false\n}\n\n// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nexport default function parseSource(source?: SanityImageSource) {\n  if (!source) {\n    return null\n  }\n\n  let image: SanityImageObject\n\n  if (typeof source === 'string' && isUrl(source)) {\n    // Someone passed an existing image url?\n    image = {\n      asset: {_ref: urlToId(source)},\n    }\n  } else if (typeof source === 'string') {\n    // Just an asset id\n    image = {\n      asset: {_ref: source},\n    }\n  } else if (isRef(source)) {\n    // We just got passed an asset directly\n    image = {\n      asset: source,\n    }\n  } else if (isAsset(source)) {\n    // If we were passed an image asset document\n    image = {\n      asset: {\n        _ref: source._id || '',\n      },\n    }\n  } else if (isAssetStub(source)) {\n    // If we were passed a partial asset (`url`, but no `_id`)\n    image = {\n      asset: {\n        _ref: urlToId(source.asset.url),\n      },\n    }\n  } else if (typeof source.asset === 'object') {\n    // Probably an actual image with materialized asset\n    image = source\n  } else {\n    // We got something that does not look like an image, or it is an image\n    // that currently isn't sporting an asset.\n    return null\n  }\n\n  const img = source as SanityImageObject\n  if (img.crop) {\n    image.crop = img.crop\n  }\n\n  if (img.hotspot) {\n    image.hotspot = img.hotspot\n  }\n\n  return applyDefaults(image)\n}\n\nfunction isUrl(url: string) {\n  return /^https?:\\/\\//.test(`${url}`)\n}\n\nfunction urlToId(url: string) {\n  const parts = url.split('/').slice(-1)\n  return `image-${parts[0]}`.replace(/\\.([a-z]+)$/, '-$1')\n}\n\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image: SanityImageObject) {\n  if (image.crop && image.hotspot) {\n    return image as Required<SanityImageObject>\n  }\n\n  // We need to pad in default values for crop or hotspot\n  const result = {...image}\n\n  if (!result.crop) {\n    result.crop = {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0,\n    }\n  }\n\n  if (!result.hotspot) {\n    result.hotspot = {\n      x: 0.5,\n      y: 0.5,\n      height: 1.0,\n      width: 1.0,\n    }\n  }\n\n  return result as Required<SanityImageObject>\n}\n", "import parseAssetId from './parseAssetId'\nimport parseSource from './parseSource'\nimport {\n  CropSpec,\n  HotspotSpec,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAsset,\n  SanityAsset,\n  SanityImageFitResult,\n  SanityImageRect,\n  SanityReference,\n} from './types'\n\nexport const SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n  ['width', 'w'],\n  ['height', 'h'],\n  ['format', 'fm'],\n  ['download', 'dl'],\n  ['blur', 'blur'],\n  ['sharpen', 'sharp'],\n  ['invert', 'invert'],\n  ['orientation', 'or'],\n  ['minHeight', 'min-h'],\n  ['maxHeight', 'max-h'],\n  ['minWidth', 'min-w'],\n  ['maxWidth', 'max-w'],\n  ['quality', 'q'],\n  ['fit', 'fit'],\n  ['crop', 'crop'],\n  ['saturation', 'sat'],\n  ['auto', 'auto'],\n  ['dpr', 'dpr'],\n  ['pad', 'pad'],\n]\n\nexport default function urlForImage(options: ImageUrlBuilderOptions): string {\n  let spec = {...(options || {})}\n  const source = spec.source\n  delete spec.source\n\n  const image = parseSource(source)\n  if (!image) {\n    throw new Error(`Unable to resolve image URL from source (${JSON.stringify(source)})`)\n  }\n\n  const id = (image.asset as SanityReference)._ref || (image.asset as SanityAsset)._id || ''\n  const asset = parseAssetId(id)\n\n  // Compute crop rect in terms of pixel coordinates in the raw source image\n  const cropLeft = Math.round(image.crop.left * asset.width)\n  const cropTop = Math.round(image.crop.top * asset.height)\n  const crop = {\n    left: cropLeft,\n    top: cropTop,\n    width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n    height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop),\n  }\n\n  // Compute hot spot rect in terms of pixel coordinates\n  const hotSpotVerticalRadius = (image.hotspot.height * asset.height) / 2\n  const hotSpotHorizontalRadius = (image.hotspot.width * asset.width) / 2\n  const hotSpotCenterX = image.hotspot.x * asset.width\n  const hotSpotCenterY = image.hotspot.y * asset.height\n  const hotspot = {\n    left: hotSpotCenterX - hotSpotHorizontalRadius,\n    top: hotSpotCenterY - hotSpotVerticalRadius,\n    right: hotSpotCenterX + hotSpotHorizontalRadius,\n    bottom: hotSpotCenterY + hotSpotVerticalRadius,\n  }\n\n  // If irrelevant, or if we are requested to: don't perform crop/fit based on\n  // the crop/hotspot.\n  if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n    spec = {...spec, ...fit({crop, hotspot}, spec)}\n  }\n\n  return specToImageUrl({...spec, asset})\n}\n\n// eslint-disable-next-line complexity\nfunction specToImageUrl(spec: ImageUrlBuilderOptionsWithAsset) {\n  const cdnUrl = spec.baseUrl || 'https://cdn.sanity.io'\n  const filename = `${spec.asset.id}-${spec.asset.width}x${spec.asset.height}.${spec.asset.format}`\n  const baseUrl = `${cdnUrl}/images/${spec.projectId}/${spec.dataset}/${filename}`\n\n  const params = []\n\n  if (spec.rect) {\n    // Only bother url with a crop if it actually crops anything\n    const {left, top, width, height} = spec.rect\n    const isEffectiveCrop =\n      left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width\n\n    if (isEffectiveCrop) {\n      params.push(`rect=${left},${top},${width},${height}`)\n    }\n  }\n\n  if (spec.bg) {\n    params.push(`bg=${spec.bg}`)\n  }\n\n  if (spec.focalPoint) {\n    params.push(`fp-x=${spec.focalPoint.x}`)\n    params.push(`fp-y=${spec.focalPoint.y}`)\n  }\n\n  const flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('')\n  if (flip) {\n    params.push(`flip=${flip}`)\n  }\n\n  // Map from spec name to url param name, and allow using the actual param name as an alternative\n  SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach((mapping) => {\n    const [specName, param] = mapping\n    if (typeof spec[specName] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[specName])}`)\n    } else if (typeof spec[param] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[param])}`)\n    }\n  })\n\n  if (params.length === 0) {\n    return baseUrl\n  }\n\n  return `${baseUrl}?${params.join('&')}`\n}\n\nfunction fit(\n  source: {crop: CropSpec; hotspot: HotspotSpec},\n  spec: ImageUrlBuilderOptions\n): SanityImageFitResult {\n  let cropRect: SanityImageRect\n\n  const imgWidth = spec.width\n  const imgHeight = spec.height\n\n  // If we are not constraining the aspect ratio, we'll just use the whole crop\n  if (!(imgWidth && imgHeight)) {\n    return {width: imgWidth, height: imgHeight, rect: source.crop}\n  }\n\n  const crop = source.crop\n  const hotspot = source.hotspot\n\n  // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n  const desiredAspectRatio = imgWidth / imgHeight\n  const cropAspectRatio = crop.width / crop.height\n\n  if (cropAspectRatio > desiredAspectRatio) {\n    // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n    const height = Math.round(crop.height)\n    const width = Math.round(height * desiredAspectRatio)\n    const top = Math.max(0, Math.round(crop.top))\n\n    // Center output horizontally over hotspot\n    const hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left)\n    let left = Math.max(0, Math.round(hotspotXCenter - width / 2))\n\n    // Keep output within crop\n    if (left < crop.left) {\n      left = crop.left\n    } else if (left + width > crop.left + crop.width) {\n      left = crop.left + crop.width - width\n    }\n\n    cropRect = {left, top, width, height}\n  } else {\n    // The crop is taller than the desired ratio, we are cutting from top and bottom\n    const width = crop.width\n    const height = Math.round(width / desiredAspectRatio)\n    const left = Math.max(0, Math.round(crop.left))\n\n    // Center output vertically over hotspot\n    const hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top)\n    let top = Math.max(0, Math.round(hotspotYCenter - height / 2))\n\n    // Keep output rect within crop\n    if (top < crop.top) {\n      top = crop.top\n    } else if (top + height > crop.top + crop.height) {\n      top = crop.top + crop.height - height\n    }\n\n    cropRect = {left, top, width, height}\n  }\n\n  return {\n    width: imgWidth,\n    height: imgHeight,\n    rect: cropRect,\n  }\n}\n\n// For backwards-compatibility\nexport {parseSource}\n", "import {\n  AutoMode,\n  CropMode,\n  FitMode,\n  ImageFormat,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAliases,\n  Orientation,\n  SanityClientLike,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport urlForImage, {SPEC_NAME_TO_URL_NAME_MAPPINGS} from './urlForImage'\n\nconst validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min']\nconst validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy']\nconst validAutoModes = ['format']\n\nfunction isSanityClientLike(client?: SanityClientLike): client is SanityClientLike {\n  return client ? typeof client.clientConfig === 'object' : false\n}\n\nfunction rewriteSpecName(key: string) {\n  const specs = SPEC_NAME_TO_URL_NAME_MAPPINGS\n  for (const entry of specs) {\n    const [specName, param] = entry\n    if (key === specName || key === param) {\n      return specName\n    }\n  }\n\n  return key\n}\n\nexport default function urlBuilder(options?: SanityClientLike | SanityProjectDetails) {\n  // Did we get a SanityClient?\n  const client = options as SanityClientLike\n  if (isSanityClientLike(client)) {\n    // Inherit config from client\n    const {apiHost: apiUrl, projectId, dataset} = client.clientConfig\n    const apiHost = apiUrl || 'https://api.sanity.io'\n    return new ImageUrlBuilder(null, {\n      baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId,\n      dataset,\n    })\n  }\n\n  // Or just accept the options as given\n  return new ImageUrlBuilder(null, options as ImageUrlBuilderOptions)\n}\n\nexport class ImageUrlBuilder {\n  public options: ImageUrlBuilderOptions\n\n  constructor(parent: ImageUrlBuilder | null, options: ImageUrlBuilderOptions) {\n    this.options = parent\n      ? {...(parent.options || {}), ...(options || {})} // Merge parent options\n      : {...(options || {})} // Copy options\n  }\n\n  withOptions(options: Partial<ImageUrlBuilderOptionsWithAliases>) {\n    const baseUrl = options.baseUrl || this.options.baseUrl\n\n    const newOptions: {[key: string]: any} = {baseUrl}\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        const specKey = rewriteSpecName(key)\n        newOptions[specKey] = options[key]\n      }\n    }\n\n    return new ImageUrlBuilder(this, {baseUrl, ...newOptions})\n  }\n\n  // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n  image(source: SanityImageSource) {\n    return this.withOptions({source})\n  }\n\n  // Specify the dataset\n  dataset(dataset: string) {\n    return this.withOptions({dataset})\n  }\n\n  // Specify the projectId\n  projectId(projectId: string) {\n    return this.withOptions({projectId})\n  }\n\n  // Specify background color\n  bg(bg: string) {\n    return this.withOptions({bg})\n  }\n\n  // Set DPR scaling factor\n  dpr(dpr: number) {\n    // A DPR of 1 is the default - so only include it if we have a different value\n    return this.withOptions(dpr && dpr !== 1 ? {dpr} : {})\n  }\n\n  // Specify the width of the image in pixels\n  width(width: number) {\n    return this.withOptions({width})\n  }\n\n  // Specify the height of the image in pixels\n  height(height: number) {\n    return this.withOptions({height})\n  }\n\n  // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n  focalPoint(x: number, y: number) {\n    return this.withOptions({focalPoint: {x, y}})\n  }\n\n  maxWidth(maxWidth: number) {\n    return this.withOptions({maxWidth})\n  }\n\n  minWidth(minWidth: number) {\n    return this.withOptions({minWidth})\n  }\n\n  maxHeight(maxHeight: number) {\n    return this.withOptions({maxHeight})\n  }\n\n  minHeight(minHeight: number) {\n    return this.withOptions({minHeight})\n  }\n\n  // Specify width and height in pixels\n  size(width: number, height: number) {\n    return this.withOptions({width, height})\n  }\n\n  // Specify blur between 0 and 100\n  blur(blur: number) {\n    return this.withOptions({blur})\n  }\n\n  sharpen(sharpen: number) {\n    return this.withOptions({sharpen})\n  }\n\n  // Specify the desired rectangle of the image\n  rect(left: number, top: number, width: number, height: number) {\n    return this.withOptions({rect: {left, top, width, height}})\n  }\n\n  // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n  format(format: ImageFormat) {\n    return this.withOptions({format})\n  }\n\n  invert(invert: boolean) {\n    return this.withOptions({invert})\n  }\n\n  // Rotation in degrees 0, 90, 180, 270\n  orientation(orientation: Orientation) {\n    return this.withOptions({orientation})\n  }\n\n  // Compression quality 0-100\n  quality(quality: number) {\n    return this.withOptions({quality})\n  }\n\n  // Make it a download link. Parameter is default filename.\n  forceDownload(download: boolean | string) {\n    return this.withOptions({download})\n  }\n\n  // Flip image horizontally\n  flipHorizontal() {\n    return this.withOptions({flipHorizontal: true})\n  }\n\n  // Flip image vertically\n  flipVertical() {\n    return this.withOptions({flipVertical: true})\n  }\n\n  // Ignore crop/hotspot from image record, even when present\n  ignoreImageParams() {\n    return this.withOptions({ignoreImageParams: true})\n  }\n\n  fit(value: FitMode) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(`Invalid fit mode \"${value}\"`)\n    }\n\n    return this.withOptions({fit: value})\n  }\n\n  crop(value: CropMode) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(`Invalid crop mode \"${value}\"`)\n    }\n\n    return this.withOptions({crop: value})\n  }\n\n  // Saturation\n  saturation(saturation: number) {\n    return this.withOptions({saturation})\n  }\n\n  auto(value: AutoMode) {\n    if (validAutoModes.indexOf(value) === -1) {\n      throw new Error(`Invalid auto mode \"${value}\"`)\n    }\n\n    return this.withOptions({auto: value})\n  }\n\n  // Specify the number of pixels to pad the image\n  pad(pad: number) {\n    return this.withOptions({pad})\n  }\n\n  // Gets the url based on the submitted parameters\n  url() {\n    return urlForImage(this.options)\n  }\n\n  // Alias for url()\n  toString() {\n    return this.url()\n  }\n}\n", "export default require(\"./node_modules/@sanity/image-url/lib/browser/image-url.umd.js\");"],
  "mappings": "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",
  "names": []
}
