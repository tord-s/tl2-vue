import {
  __commonJS
} from "./chunk-LFPUMNMD.js";

// node_modules/@sanity/image-url/lib/browser/image-url.umd.js
var require_image_url_umd = __commonJS({
  "node_modules/@sanity/image-url/lib/browser/image-url.umd.js"(exports, module) {
    (function(global, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global.SanityImageUrlBuilder = factory();
    })(exports, function() {
      var example = "image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg";
      function parseAssetId(ref) {
        var ref$1 = ref.split("-");
        var id = ref$1[1];
        var dimensionString = ref$1[2];
        var format = ref$1[3];
        if (!id || !dimensionString || !format) {
          throw new Error("Malformed asset _ref '" + ref + `'. Expected an id like "` + example + '".');
        }
        var ref$2 = dimensionString.split("x");
        var imgWidthStr = ref$2[0];
        var imgHeightStr = ref$2[1];
        var width = +imgWidthStr;
        var height = +imgHeightStr;
        var isValidAssetId = isFinite(width) && isFinite(height);
        if (!isValidAssetId) {
          throw new Error("Malformed asset _ref '" + ref + `'. Expected an id like "` + example + '".');
        }
        return {
          id,
          width,
          height,
          format
        };
      }
      var isRef = function(src) {
        var source = src;
        return source ? typeof source._ref === "string" : false;
      };
      var isAsset = function(src) {
        var source = src;
        return source ? typeof source._id === "string" : false;
      };
      var isAssetStub = function(src) {
        var source = src;
        return source && source.asset ? typeof source.asset.url === "string" : false;
      };
      function parseSource(source) {
        if (!source) {
          return null;
        }
        var image;
        if (typeof source === "string" && isUrl(source)) {
          image = {
            asset: {
              _ref: urlToId(source)
            }
          };
        } else if (typeof source === "string") {
          image = {
            asset: {
              _ref: source
            }
          };
        } else if (isRef(source)) {
          image = {
            asset: source
          };
        } else if (isAsset(source)) {
          image = {
            asset: {
              _ref: source._id || ""
            }
          };
        } else if (isAssetStub(source)) {
          image = {
            asset: {
              _ref: urlToId(source.asset.url)
            }
          };
        } else if (typeof source.asset === "object") {
          image = source;
        } else {
          return null;
        }
        var img = source;
        if (img.crop) {
          image.crop = img.crop;
        }
        if (img.hotspot) {
          image.hotspot = img.hotspot;
        }
        return applyDefaults(image);
      }
      function isUrl(url) {
        return /^https?:\/\//.test("" + url);
      }
      function urlToId(url) {
        var parts = url.split("/").slice(-1);
        return ("image-" + parts[0]).replace(/\.([a-z]+)$/, "-$1");
      }
      function applyDefaults(image) {
        if (image.crop && image.hotspot) {
          return image;
        }
        var result = Object.assign({}, image);
        if (!result.crop) {
          result.crop = {
            left: 0,
            top: 0,
            bottom: 0,
            right: 0
          };
        }
        if (!result.hotspot) {
          result.hotspot = {
            x: 0.5,
            y: 0.5,
            height: 1,
            width: 1
          };
        }
        return result;
      }
      var SPEC_NAME_TO_URL_NAME_MAPPINGS = [["width", "w"], ["height", "h"], ["format", "fm"], ["download", "dl"], ["blur", "blur"], ["sharpen", "sharp"], ["invert", "invert"], ["orientation", "or"], ["minHeight", "min-h"], ["maxHeight", "max-h"], ["minWidth", "min-w"], ["maxWidth", "max-w"], ["quality", "q"], ["fit", "fit"], ["crop", "crop"], ["saturation", "sat"], ["auto", "auto"], ["dpr", "dpr"], ["pad", "pad"]];
      function urlForImage(options) {
        var spec = Object.assign({}, options || {});
        var source = spec.source;
        delete spec.source;
        var image = parseSource(source);
        if (!image) {
          throw new Error("Unable to resolve image URL from source (" + JSON.stringify(source) + ")");
        }
        var id = image.asset._ref || image.asset._id || "";
        var asset = parseAssetId(id);
        var cropLeft = Math.round(image.crop.left * asset.width);
        var cropTop = Math.round(image.crop.top * asset.height);
        var crop = {
          left: cropLeft,
          top: cropTop,
          width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),
          height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop)
        };
        var hotSpotVerticalRadius = image.hotspot.height * asset.height / 2;
        var hotSpotHorizontalRadius = image.hotspot.width * asset.width / 2;
        var hotSpotCenterX = image.hotspot.x * asset.width;
        var hotSpotCenterY = image.hotspot.y * asset.height;
        var hotspot = {
          left: hotSpotCenterX - hotSpotHorizontalRadius,
          top: hotSpotCenterY - hotSpotVerticalRadius,
          right: hotSpotCenterX + hotSpotHorizontalRadius,
          bottom: hotSpotCenterY + hotSpotVerticalRadius
        };
        if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {
          spec = Object.assign({}, spec, fit({
            crop,
            hotspot
          }, spec));
        }
        return specToImageUrl(Object.assign({}, spec, { asset }));
      }
      function specToImageUrl(spec) {
        var cdnUrl = spec.baseUrl || "https://cdn.sanity.io";
        var filename = spec.asset.id + "-" + spec.asset.width + "x" + spec.asset.height + "." + spec.asset.format;
        var baseUrl = cdnUrl + "/images/" + spec.projectId + "/" + spec.dataset + "/" + filename;
        var params = [];
        if (spec.rect) {
          var ref = spec.rect;
          var left = ref.left;
          var top = ref.top;
          var width = ref.width;
          var height = ref.height;
          var isEffectiveCrop = left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width;
          if (isEffectiveCrop) {
            params.push("rect=" + left + "," + top + "," + width + "," + height);
          }
        }
        if (spec.bg) {
          params.push("bg=" + spec.bg);
        }
        if (spec.focalPoint) {
          params.push("fp-x=" + spec.focalPoint.x);
          params.push("fp-y=" + spec.focalPoint.y);
        }
        var flip = [spec.flipHorizontal && "h", spec.flipVertical && "v"].filter(Boolean).join("");
        if (flip) {
          params.push("flip=" + flip);
        }
        SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach(function(mapping) {
          var specName = mapping[0];
          var param = mapping[1];
          if (typeof spec[specName] !== "undefined") {
            params.push(param + "=" + encodeURIComponent(spec[specName]));
          } else if (typeof spec[param] !== "undefined") {
            params.push(param + "=" + encodeURIComponent(spec[param]));
          }
        });
        if (params.length === 0) {
          return baseUrl;
        }
        return baseUrl + "?" + params.join("&");
      }
      function fit(source, spec) {
        var cropRect;
        var imgWidth = spec.width;
        var imgHeight = spec.height;
        if (!(imgWidth && imgHeight)) {
          return {
            width: imgWidth,
            height: imgHeight,
            rect: source.crop
          };
        }
        var crop = source.crop;
        var hotspot = source.hotspot;
        var desiredAspectRatio = imgWidth / imgHeight;
        var cropAspectRatio = crop.width / crop.height;
        if (cropAspectRatio > desiredAspectRatio) {
          var height = Math.round(crop.height);
          var width = Math.round(height * desiredAspectRatio);
          var top = Math.max(0, Math.round(crop.top));
          var hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left);
          var left = Math.max(0, Math.round(hotspotXCenter - width / 2));
          if (left < crop.left) {
            left = crop.left;
          } else if (left + width > crop.left + crop.width) {
            left = crop.left + crop.width - width;
          }
          cropRect = {
            left,
            top,
            width,
            height
          };
        } else {
          var width$1 = crop.width;
          var height$1 = Math.round(width$1 / desiredAspectRatio);
          var left$1 = Math.max(0, Math.round(crop.left));
          var hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top);
          var top$1 = Math.max(0, Math.round(hotspotYCenter - height$1 / 2));
          if (top$1 < crop.top) {
            top$1 = crop.top;
          } else if (top$1 + height$1 > crop.top + crop.height) {
            top$1 = crop.top + crop.height - height$1;
          }
          cropRect = {
            left: left$1,
            top: top$1,
            width: width$1,
            height: height$1
          };
        }
        return {
          width: imgWidth,
          height: imgHeight,
          rect: cropRect
        };
      }
      var validFits = ["clip", "crop", "fill", "fillmax", "max", "scale", "min"];
      var validCrops = ["top", "bottom", "left", "right", "center", "focalpoint", "entropy"];
      var validAutoModes = ["format"];
      function isSanityClientLike(client) {
        return client ? typeof client.clientConfig === "object" : false;
      }
      function rewriteSpecName(key) {
        var specs = SPEC_NAME_TO_URL_NAME_MAPPINGS;
        for (var i = 0, list = specs; i < list.length; i += 1) {
          var entry = list[i];
          var specName = entry[0];
          var param = entry[1];
          if (key === specName || key === param) {
            return specName;
          }
        }
        return key;
      }
      function urlBuilder(options) {
        var client = options;
        if (isSanityClientLike(client)) {
          var ref = client.clientConfig;
          var apiUrl = ref.apiHost;
          var projectId = ref.projectId;
          var dataset = ref.dataset;
          var apiHost = apiUrl || "https://api.sanity.io";
          return new ImageUrlBuilder(null, {
            baseUrl: apiHost.replace(/^https:\/\/api\./, "https://cdn."),
            projectId,
            dataset
          });
        }
        return new ImageUrlBuilder(null, options);
      }
      var ImageUrlBuilder = function ImageUrlBuilder2(parent, options) {
        this.options = parent ? Object.assign({}, parent.options || {}, options || {}) : Object.assign({}, options || {});
      };
      ImageUrlBuilder.prototype.withOptions = function withOptions(options) {
        var baseUrl = options.baseUrl || this.options.baseUrl;
        var newOptions = {
          baseUrl
        };
        for (var key in options) {
          if (options.hasOwnProperty(key)) {
            var specKey = rewriteSpecName(key);
            newOptions[specKey] = options[key];
          }
        }
        return new ImageUrlBuilder(this, Object.assign({}, { baseUrl }, newOptions));
      };
      ImageUrlBuilder.prototype.image = function image(source) {
        return this.withOptions({
          source
        });
      };
      ImageUrlBuilder.prototype.dataset = function dataset(dataset$1) {
        return this.withOptions({
          dataset: dataset$1
        });
      };
      ImageUrlBuilder.prototype.projectId = function projectId(projectId$1) {
        return this.withOptions({
          projectId: projectId$1
        });
      };
      ImageUrlBuilder.prototype.bg = function bg(bg$1) {
        return this.withOptions({
          bg: bg$1
        });
      };
      ImageUrlBuilder.prototype.dpr = function dpr(dpr$1) {
        return this.withOptions(dpr$1 && dpr$1 !== 1 ? {
          dpr: dpr$1
        } : {});
      };
      ImageUrlBuilder.prototype.width = function width(width$1) {
        return this.withOptions({
          width: width$1
        });
      };
      ImageUrlBuilder.prototype.height = function height(height$1) {
        return this.withOptions({
          height: height$1
        });
      };
      ImageUrlBuilder.prototype.focalPoint = function focalPoint(x, y) {
        return this.withOptions({
          focalPoint: {
            x,
            y
          }
        });
      };
      ImageUrlBuilder.prototype.maxWidth = function maxWidth(maxWidth$1) {
        return this.withOptions({
          maxWidth: maxWidth$1
        });
      };
      ImageUrlBuilder.prototype.minWidth = function minWidth(minWidth$1) {
        return this.withOptions({
          minWidth: minWidth$1
        });
      };
      ImageUrlBuilder.prototype.maxHeight = function maxHeight(maxHeight$1) {
        return this.withOptions({
          maxHeight: maxHeight$1
        });
      };
      ImageUrlBuilder.prototype.minHeight = function minHeight(minHeight$1) {
        return this.withOptions({
          minHeight: minHeight$1
        });
      };
      ImageUrlBuilder.prototype.size = function size(width, height) {
        return this.withOptions({
          width,
          height
        });
      };
      ImageUrlBuilder.prototype.blur = function blur(blur$1) {
        return this.withOptions({
          blur: blur$1
        });
      };
      ImageUrlBuilder.prototype.sharpen = function sharpen(sharpen$1) {
        return this.withOptions({
          sharpen: sharpen$1
        });
      };
      ImageUrlBuilder.prototype.rect = function rect(left, top, width, height) {
        return this.withOptions({
          rect: {
            left,
            top,
            width,
            height
          }
        });
      };
      ImageUrlBuilder.prototype.format = function format(format$1) {
        return this.withOptions({
          format: format$1
        });
      };
      ImageUrlBuilder.prototype.invert = function invert(invert$1) {
        return this.withOptions({
          invert: invert$1
        });
      };
      ImageUrlBuilder.prototype.orientation = function orientation(orientation$1) {
        return this.withOptions({
          orientation: orientation$1
        });
      };
      ImageUrlBuilder.prototype.quality = function quality(quality$1) {
        return this.withOptions({
          quality: quality$1
        });
      };
      ImageUrlBuilder.prototype.forceDownload = function forceDownload(download) {
        return this.withOptions({
          download
        });
      };
      ImageUrlBuilder.prototype.flipHorizontal = function flipHorizontal() {
        return this.withOptions({
          flipHorizontal: true
        });
      };
      ImageUrlBuilder.prototype.flipVertical = function flipVertical() {
        return this.withOptions({
          flipVertical: true
        });
      };
      ImageUrlBuilder.prototype.ignoreImageParams = function ignoreImageParams() {
        return this.withOptions({
          ignoreImageParams: true
        });
      };
      ImageUrlBuilder.prototype.fit = function fit2(value) {
        if (validFits.indexOf(value) === -1) {
          throw new Error('Invalid fit mode "' + value + '"');
        }
        return this.withOptions({
          fit: value
        });
      };
      ImageUrlBuilder.prototype.crop = function crop(value) {
        if (validCrops.indexOf(value) === -1) {
          throw new Error('Invalid crop mode "' + value + '"');
        }
        return this.withOptions({
          crop: value
        });
      };
      ImageUrlBuilder.prototype.saturation = function saturation(saturation$1) {
        return this.withOptions({
          saturation: saturation$1
        });
      };
      ImageUrlBuilder.prototype.auto = function auto(value) {
        if (validAutoModes.indexOf(value) === -1) {
          throw new Error('Invalid auto mode "' + value + '"');
        }
        return this.withOptions({
          auto: value
        });
      };
      ImageUrlBuilder.prototype.pad = function pad(pad$1) {
        return this.withOptions({
          pad: pad$1
        });
      };
      ImageUrlBuilder.prototype.url = function url() {
        return urlForImage(this.options);
      };
      ImageUrlBuilder.prototype.toString = function toString() {
        return this.url();
      };
      return urlBuilder;
    });
  }
});

// dep:@sanity_image-url
var sanity_image_url_default = require_image_url_umd();
export {
  sanity_image_url_default as default
};
//# sourceMappingURL=@sanity_image-url.js.map
